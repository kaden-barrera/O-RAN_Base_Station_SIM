In this Dockerfile:

We start with a base image that includes Python 3.8.
We set the working directory to /app inside the container.
We copy the cu_cp.py file into the container.
We install any required Python packages using pip install.
We optionally expose any ports needed for communication between containers (uncomment the EXPOSE line if necessary).
Finally, we specify the command to run the microservice (python cu_cp.py) when the container starts.
Make sure to adjust the COPY command to copy any additional files or dependencies required for your centralized_unit_cp microservice. Also, update the pip install command to install the necessary Python packages for your microservice.

Once you've created your Dockerfile, you can build a Docker image using the following command:
(bash) docker build -t centralized-unit-cp-image .

Replace 'centralized-unit-cp-image' with the desired name for your Docker image. After building the image, 
you can run a Docker container using the following command:
(bash) docker run -d --name centralized-unit-cp-container centralized-unit-cp-image

This will start a container named centralized-unit-cp-container based on the Docker image you built. Adjust 
the container name and image name as needed for your specific project requirements.

Ensure that your Dockerfile and source code files are structured appropriately for building and running your 
Distributed Unit microservice within a Docker container. Test the Docker image and container to verify that 
your microservice functions correctly in the containerized environment.